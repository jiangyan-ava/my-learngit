/*
多态：可以理解为事物存在的多种体现形态
（“继承让类与类之间产生了关系，这样才有了多态的特性”）
人（男人 女人）
动物（猫 狗）
猫 x=new 猫();
动物 x=new 猫();  猫的实体具有猫的类型，也具备动物类型
JAVA中着重讲对象的多态性（实际上函数的重载与覆盖也体现其多态性）
多态的：
1.表现形式
  父类的引用指向了自己的子类对象
  父类的引用也可以接收自己的子类对象
2.前提
  必须是类与类之间有关系，要么继承；要么实现
  通常还有一个前提：存在覆盖
3.好处
  多态的出现大大提高了程序的扩展性
4.弊端
  提高了扩展性，但是只能使用父类的引用访问父类的成员，不能访问子类成员
 （
  比如在这个程序中，假设父类Animal不是抽象类：  Animal c父类引用；访问子类成员 c.gongdi();就不允许，系统会报错显示找不到该符号；
  因为在Java中，父类是先建立的，这个时候子类还没有建立，子类成员也不存在，自然不存在访问子类成员
  ）
5.应用
6.多态的出现代码中的特点（多态的使用注意事项）
*/
/*
需求：动物
猫 狗 
*/
abstract class Animal
{
	abstract void eat();
	
}
class Cat extends Animal 
{
	public void eat()
	{
		System.out.println("fish");
	}
	public void catchmouse()
	{
		System.out.println("catch mouse");
	}
}
class Dog extends Animal
{
	public void eat()
	{
		System.out.println("gutou");
	}
	public void kanjia()
	{
		System.out.println("kanjiahhh");
	}
}
class Pig extends Animal
{
	public void eat()
	{
		System.out.println("siliao");
	}
	public void gongDi()
	{
		System.out.println("gong_gong");
	}
}
//---------------------------------------------------------------------------------------------------------------------------------------

class DuoTaiDemo
{
	public static void main(String[] args)
	{
		//Cat c=new Cat();
		//c.eat();
		//Dog d=new Dog();
		//d.eat();
		/*Cat c1=new Cat();
		function(c);
		Dog d1=new Dog();
		function(d);
		*/
		Animal c=new Cat();//一个对象具备多种形态造成的：是Cat类型又是Animal类型（如果反过来写，new Animal是不允许的：Animal是抽象的，无法实例化，也就无法分配空间来创建新对象）
		c.eat();
		
		function(new Cat());//这一句传到下面的function函数，就相当于Animal a= new Cat();
	}
	public static void function(Animal a)
	{
		a.eat();//如果在这个函数内加一句看家行为，程序会报错：因为Animal类里面并没有这个函数
	}
	/*public static void function(Cat c)相当于Cat =new Cat；可以改成function(Animal)因为父类的引用也可以接收自己的子类对象
	{
		c.eat();
	}
	*/
}






